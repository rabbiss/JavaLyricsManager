

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.undo.UndoManager;

/*
 * ---------------------
 * | LyricsApplication |
 * ---------------------
 * 
 * ProjectWork - TIEVA31 - Otto Hyyrynen
 * hyyrynen.otto.i@student.uta.fi
 *
 * With this application the user can store artist and album information,
 * and add lyrics to tracks. Data can be manipulated with editing, deleting
 * and undo/redo-functionalities. The user can select an image for the
 * list and add text over it to make the list more personalizied.
 * 
 */

/**
 *
 * @author Otto
 */
public class MainWindow extends javax.swing.JFrame {
    
    private String path;
    
    private DefaultListModel dlm;
    private UndoManager undoManager;
    
    // Information is stored in album-objects.
    private ArrayList<Album> albums = new ArrayList<Album>();
    
    // index points to the current album being manipulated.
    private int index = 0;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        
        newDialog.pack();
        
        undoManager = new UndoManager();
        
        loadDefaultImage();
        
    }
    
    
    /*
    * Fills the text fields of the MainWindow
    */
    public void fillTextFields() {
        int selection = artistList.getSelectedIndex();
    }
    
    /*
    * Loads a default image "blank.jpg" from /res folder.
    */
    public void loadDefaultImage() {
        try {
            BufferedImage image = ImageIO.read(getClass().getResource("/res/blank.jpg"));
            textAndImage1.setImage(image);
            textAndImage1.repaint();
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newDialog = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        newArtistName = new javax.swing.JTextField();
        newArtistAlbum = new javax.swing.JTextField();
        newArtistTracksSpinner = new javax.swing.JSpinner();
        newArtistGenreComboBox = new javax.swing.JComboBox<>();
        newArtistYearSpinner = new javax.swing.JSpinner();
        newArtistDialogSaveButton = new javax.swing.JButton();
        newArtistDialogCancelButton = new javax.swing.JButton();
        editDialog = new javax.swing.JDialog();
        editArtistName = new javax.swing.JTextField();
        editArtistAlbum = new javax.swing.JTextField();
        editArtistTracksSpinner = new javax.swing.JSpinner();
        editArtistGenreComboBox = new javax.swing.JComboBox<>();
        editArtistYearSpinner = new javax.swing.JSpinner();
        editArtistSaveButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        editArtistCancelButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        lyricsDialog = new javax.swing.JDialog();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        lyricsTrackSelector = new javax.swing.JComboBox<>();
        lyricsDialogCloseButton = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        popupMenu = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        artist = new javax.swing.JLabel();
        album = new javax.swing.JLabel();
        year = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        artistList = new javax.swing.JList<>();
        editButton = new javax.swing.JButton();
        lyricsButton = new javax.swing.JButton();
        addAlbumButton = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        textAndImage1 = new TextAndImage();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openFileMenuItem = new javax.swing.JMenuItem();
        saveAsFileMenuItem = new javax.swing.JMenuItem();
        exitFileMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        undoEditMenuItem = new javax.swing.JMenuItem();
        redoEditMenuItem = new javax.swing.JMenuItem();
        deleteEditMenuItem = new javax.swing.JMenuItem();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("Bundle"); // NOI18N
        jLabel1.setText(bundle.getString("MainWindow.jLabel1.text")); // NOI18N

        jLabel2.setText(bundle.getString("MainWindow.jLabel2.text")); // NOI18N

        jLabel3.setText(bundle.getString("MainWindow.jLabel3.text")); // NOI18N

        jLabel6.setText(bundle.getString("MainWindow.jLabel6.text")); // NOI18N

        jLabel7.setText(bundle.getString("MainWindow.jLabel7.text")); // NOI18N

        newArtistName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newArtistNameActionPerformed(evt);
            }
        });

        newArtistTracksSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        newArtistGenreComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Alternative", "Blues", "Children's music", "Classical", "Comedy", "Commercial", "Country", "Dance", "Disney", "Easy listening", "Electronic", "Enka", "French pop", "German folk", "German pop", "Fitness & workout", "Hip hop/rap", "Holiday", "Indie pop", "Industrial", "Inspirational - Christian gospel", "Instrumental", "J-pop", "Jazz", "K-pop", "Karaoke", "Kayokyoku", "Latin", "New age", "Opera", "Pop", "R&B/soul", "Reggae", "Rock", "Singer/songwriter", "Soundtrack", "Spoken word", "Tex-mex / Tejano", "Vocal", "World" }));

        newArtistYearSpinner.setValue(2016);

        newArtistDialogSaveButton.setText(bundle.getString("MainWindow.newArtistDialogSaveButton.text")); // NOI18N
        newArtistDialogSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newArtistDialogSaveButtonActionPerformed(evt);
            }
        });

        newArtistDialogCancelButton.setText(bundle.getString("MainWindow.newArtistDialogCancelButton.text")); // NOI18N
        newArtistDialogCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newArtistDialogCancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout newDialogLayout = new javax.swing.GroupLayout(newDialog.getContentPane());
        newDialog.getContentPane().setLayout(newDialogLayout);
        newDialogLayout.setHorizontalGroup(
            newDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(newDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(newDialogLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(94, 94, 94)
                        .addComponent(newArtistName))
                    .addGroup(newDialogLayout.createSequentialGroup()
                        .addGroup(newDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(19, 19, 19)
                        .addGroup(newDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(newDialogLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(newArtistTracksSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(newArtistGenreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(newDialogLayout.createSequentialGroup()
                        .addGroup(newDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(88, 88, 88)
                        .addGroup(newDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(newArtistYearSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(newArtistAlbum))))
                .addGap(106, 106, 106))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, newDialogLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(newArtistDialogCancelButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newArtistDialogSaveButton)
                .addContainerGap())
        );
        newDialogLayout.setVerticalGroup(
            newDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(newDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(newArtistName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(newArtistAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newArtistYearSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(newDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(newArtistGenreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(newDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newArtistTracksSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
                .addGroup(newDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newArtistDialogSaveButton)
                    .addComponent(newArtistDialogCancelButton))
                .addContainerGap())
        );

        editArtistName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editArtistNameActionPerformed(evt);
            }
        });

        editArtistTracksSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        editArtistGenreComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Alternative", "Blues", "Children's music", "Classical", "Comedy", "Commercial", "Country", "Dance", "Disney", "Easy listening", "Electronic", "Enka", "French pop", "German folk", "German pop", "Fitness & workout", "Hip hop/rap", "Holiday", "Indie pop", "Industrial", "Inspirational - Christian gospel", "Instrumental", "J-pop", "Jazz", "K-pop", "Karaoke", "Kayokyoku", "Latin", "New age", "Opera", "Pop", "R&B/soul", "Reggae", "Rock", "Singer/songwriter", "Soundtrack", "Spoken word", "Tex-mex / Tejano", "Vocal", "World" }));

        editArtistYearSpinner.setValue(2016);

        editArtistSaveButton.setText(bundle.getString("MainWindow.editArtistSaveButton.text")); // NOI18N
        editArtistSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editArtistSaveButtonActionPerformed(evt);
            }
        });

        jLabel8.setText(bundle.getString("MainWindow.jLabel8.text")); // NOI18N

        editArtistCancelButton.setText(bundle.getString("MainWindow.editArtistCancelButton.text")); // NOI18N
        editArtistCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editArtistCancelButtonActionPerformed(evt);
            }
        });

        jLabel9.setText(bundle.getString("MainWindow.jLabel9.text")); // NOI18N

        jLabel10.setText(bundle.getString("MainWindow.jLabel10.text")); // NOI18N

        jLabel11.setText(bundle.getString("MainWindow.jLabel11.text")); // NOI18N

        jLabel12.setText(bundle.getString("MainWindow.jLabel12.text")); // NOI18N

        javax.swing.GroupLayout editDialogLayout = new javax.swing.GroupLayout(editDialog.getContentPane());
        editDialog.getContentPane().setLayout(editDialogLayout);
        editDialogLayout.setHorizontalGroup(
            editDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(editDialogLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(94, 94, 94)
                        .addComponent(editArtistName))
                    .addGroup(editDialogLayout.createSequentialGroup()
                        .addGroup(editDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(19, 19, 19)
                        .addGroup(editDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(editDialogLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(editArtistTracksSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(editArtistGenreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(editDialogLayout.createSequentialGroup()
                        .addGroup(editDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addGap(88, 88, 88)
                        .addGroup(editDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editArtistYearSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editArtistAlbum))))
                .addGap(106, 106, 106))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editDialogLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(editArtistCancelButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editArtistSaveButton)
                .addContainerGap())
        );
        editDialogLayout.setVerticalGroup(
            editDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(editArtistName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(editArtistAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editArtistYearSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(editDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(editArtistGenreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(editDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(editArtistTracksSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 133, Short.MAX_VALUE)
                .addGroup(editDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editArtistSaveButton)
                    .addComponent(editArtistCancelButton))
                .addContainerGap())
        );

        lyricsDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        lyricsDialog.setMinimumSize(new java.awt.Dimension(460, 480));
        lyricsDialog.addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                lyricsDialogWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        lyricsDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                lyricsDialogWindowClosed(evt);
            }
        });

        jLabel18.setText(bundle.getString("MainWindow.jLabel18.text")); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextArea1FocusLost(evt);
            }
        });
        jTextArea1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextArea1KeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jTextArea1);

        lyricsTrackSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lyricsTrackSelectorActionPerformed(evt);
            }
        });

        lyricsDialogCloseButton.setText(bundle.getString("MainWindow.lyricsDialogCloseButton.text")); // NOI18N
        lyricsDialogCloseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lyricsDialogCloseButtonActionPerformed(evt);
            }
        });

        jLabel19.setText(bundle.getString("MainWindow.jLabel19.text")); // NOI18N

        javax.swing.GroupLayout lyricsDialogLayout = new javax.swing.GroupLayout(lyricsDialog.getContentPane());
        lyricsDialog.getContentPane().setLayout(lyricsDialogLayout);
        lyricsDialogLayout.setHorizontalGroup(
            lyricsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lyricsDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(lyricsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)
                    .addGroup(lyricsDialogLayout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lyricsTrackSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lyricsDialogLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lyricsDialogCloseButton)))
                .addContainerGap())
        );
        lyricsDialogLayout.setVerticalGroup(
            lyricsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lyricsDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(lyricsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(lyricsTrackSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lyricsDialogCloseButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenuItem1.setText(bundle.getString("MainWindow.jMenuItem1.text")); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        popupMenu.add(jMenuItem1);

        jMenuItem2.setText(bundle.getString("MainWindow.jMenuItem2.text")); // NOI18N
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        popupMenu.add(jMenuItem2);

        jMenuItem3.setText(bundle.getString("MainWindow.jMenuItem3.text")); // NOI18N
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        popupMenu.add(jMenuItem3);

        jMenuItem4.setText(bundle.getString("MainWindow.jMenuItem4.text")); // NOI18N
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        popupMenu.add(jMenuItem4);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(null);

        artist.setText(bundle.getString("MainWindow.artist.text")); // NOI18N

        album.setText(bundle.getString("MainWindow.album.text")); // NOI18N

        year.setText(bundle.getString("MainWindow.year.text")); // NOI18N

        jLabel4.setText(bundle.getString("MainWindow.jLabel4.text")); // NOI18N

        jLabel5.setText(bundle.getString("MainWindow.jLabel5.text")); // NOI18N

        artistList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        artistList.setDragEnabled(true);
        artistList.setDropMode(javax.swing.DropMode.INSERT);
        artistList.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                artistListComponentAdded(evt);
            }
        });
        artistList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                artistListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(artistList);

        editButton.setText(bundle.getString("MainWindow.editButton.text")); // NOI18N
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        lyricsButton.setText(bundle.getString("MainWindow.lyricsButton.text")); // NOI18N
        lyricsButton.setEnabled(false);
        lyricsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lyricsButtonActionPerformed(evt);
            }
        });

        addAlbumButton.setText(bundle.getString("MainWindow.addAlbumButton.text")); // NOI18N
        addAlbumButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAlbumButtonActionPerformed(evt);
            }
        });

        jLabel13.setText(bundle.getString("MainWindow.jLabel13.text")); // NOI18N

        jLabel14.setText(bundle.getString("MainWindow.jLabel14.text")); // NOI18N

        jLabel15.setText(bundle.getString("MainWindow.jLabel15.text")); // NOI18N

        jLabel16.setText(bundle.getString("MainWindow.jLabel16.text")); // NOI18N

        jLabel17.setText(bundle.getString("MainWindow.jLabel17.text")); // NOI18N

        textAndImage1.setComponentPopupMenu(popupMenu);

        javax.swing.GroupLayout textAndImage1Layout = new javax.swing.GroupLayout(textAndImage1);
        textAndImage1.setLayout(textAndImage1Layout);
        textAndImage1Layout.setHorizontalGroup(
            textAndImage1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        textAndImage1Layout.setVerticalGroup(
            textAndImage1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        fileMenu.setText(bundle.getString("MainWindow.fileMenu.text")); // NOI18N

        openFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openFileMenuItem.setText(bundle.getString("MainWindow.openFileMenuItem.text")); // NOI18N
        openFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openFileMenuItem);

        saveAsFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveAsFileMenuItem.setText(bundle.getString("MainWindow.saveAsFileMenuItem.text")); // NOI18N
        saveAsFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsFileMenuItem);

        exitFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        exitFileMenuItem.setText(bundle.getString("MainWindow.exitFileMenuItem.text")); // NOI18N
        exitFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitFileMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText(bundle.getString("MainWindow.editMenu.text")); // NOI18N

        undoEditMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_MASK));
        undoEditMenuItem.setText(bundle.getString("MainWindow.undoEditMenuItem.text")); // NOI18N
        undoEditMenuItem.setEnabled(false);
        undoEditMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoEditMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(undoEditMenuItem);

        redoEditMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        redoEditMenuItem.setText(bundle.getString("MainWindow.redoEditMenuItem.text")); // NOI18N
        redoEditMenuItem.setEnabled(false);
        redoEditMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoEditMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(redoEditMenuItem);

        deleteEditMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        deleteEditMenuItem.setText(bundle.getString("MainWindow.deleteEditMenuItem.text")); // NOI18N
        deleteEditMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteEditMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(deleteEditMenuItem);

        menuBar.add(editMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textAndImage1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(year)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(album)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel14))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(artist)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addAlbumButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(editButton)
                                .addGap(48, 48, 48)
                                .addComponent(lyricsButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(50, 50, 50))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(editButton)
                                    .addComponent(lyricsButton)
                                    .addComponent(addAlbumButton)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(artist)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(album)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(year)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(45, 45, 45))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(textAndImage1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*
    * Closes the application.
    */
    private void exitFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitFileMenuItemActionPerformed
        // Close the program
        System.exit(0);
    }//GEN-LAST:event_exitFileMenuItemActionPerformed

    /*
    * Edit-button functionality.
    */
    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        // If an item is selected inside the list:
        if (!artistList.isSelectionEmpty()) {
            editDialog.setVisible(true);
            editDialog.setSize(450, 300);
            index = artistList.getSelectedIndex();
            setAlbumFields();
        }
    }//GEN-LAST:event_editButtonActionPerformed

    /*
    * Add-button functionality.
    */
    private void addAlbumButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAlbumButtonActionPerformed
        // Create a new window
        newDialog.setVisible(true);
    }//GEN-LAST:event_addAlbumButtonActionPerformed

    private void newArtistNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newArtistNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newArtistNameActionPerformed

    private void newArtistDialogSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newArtistDialogSaveButtonActionPerformed

        // Read inputs from the boxes and spinners.
        String artist = newArtistName.getText();
        String album = newArtistAlbum.getText();
        int year = (int) newArtistYearSpinner.getValue();
        String genre = (String) newArtistGenreComboBox.getSelectedItem();
        int tracks = (int) newArtistTracksSpinner.getValue();

        // Create a new album-object.
        albums.add(new Album(artist, album, year, genre, tracks));
        
        // Update the artistList according to the albums-arraylist.
        updateList();
        
        // Display a message to the user if the new album was added succesfully.
        JOptionPane.showMessageDialog(this, "New album " + album + " by " + artist + " added succesfully!");
        
        // Set newDialog-inputs to default states.
        newArtistName.setText("");
        newArtistAlbum.setText("");
        newArtistGenreComboBox.setSelectedItem("Alternative");
        newArtistYearSpinner.setValue(2016);
        newArtistTracksSpinner.setValue(0);
        
        // Close the newDialog-window
        newDialog.dispose();
        
    }//GEN-LAST:event_newArtistDialogSaveButtonActionPerformed

    private void updateList() {
        // Add the album to the artistList.
        this.dlm = new DefaultListModel();
        for (Album a : albums) {
            dlm.addElement(a);
        }
        artistList.setModel(dlm);
    }
    
    private void editArtistNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editArtistNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_editArtistNameActionPerformed

    private void editArtistSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editArtistSaveButtonActionPerformed
        // TODO add your handling code here:
        albums.get(index).setAlbum(editArtistAlbum.getText());
        albums.get(index).setArtist(editArtistName.getText());
        albums.get(index).setGenre(editArtistGenreComboBox.getSelectedItem() + "");
        albums.get(index).setYear((int) editArtistYearSpinner.getValue());
        albums.get(index).setTracks((int) editArtistTracksSpinner.getValue());
        updateList();
        // Display a message to the user that the album was updated succesfully.
        JOptionPane.showMessageDialog(this, "Album info updated succesfully!");
        editDialog.dispose();
        
    }//GEN-LAST:event_editArtistSaveButtonActionPerformed

    private void artistListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_artistListMouseClicked
        if (artistList.getSelectedIndex() > -1) {
            // Set index-variable to current selection.
            index = artistList.getSelectedIndex();
            
            // Fill the upper fields
            jLabel13.setText(albums.get(artistList.getSelectedIndex()).getArtist());
            jLabel14.setText(albums.get(artistList.getSelectedIndex()).getAlbum());
            jLabel15.setText(albums.get(artistList.getSelectedIndex()).getYear() + "");
            jLabel16.setText(albums.get(artistList.getSelectedIndex()).getGenre());
            jLabel17.setText(albums.get(artistList.getSelectedIndex()).getTracks() + "");
            
            // Make lyrics-button clickable
            lyricsButton.setEnabled(true);
        }
    }//GEN-LAST:event_artistListMouseClicked

    private void artistListComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_artistListComponentAdded
        // TODO add your handling code here:
        
    }//GEN-LAST:event_artistListComponentAdded

    private void lyricsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lyricsButtonActionPerformed
        lyricsDialog.setVisible(true);
    }//GEN-LAST:event_lyricsButtonActionPerformed

    private void lyricsTrackSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lyricsTrackSelectorActionPerformed
        // Fill the jTextArea with lyrics.
        jTextArea1.setText("");
        jTextArea1.setText(albums.get(index).getLyrics(lyricsTrackSelector.getSelectedIndex()));
    }//GEN-LAST:event_lyricsTrackSelectorActionPerformed

    private void lyricsDialogWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_lyricsDialogWindowGainedFocus
        // Initialize the track-selector
        
        jLabel18.setText(albums.get(index).getArtist() + ": " + albums.get(index).getAlbum());
        
        int tracks = albums.get(index).getTracks();
        int y = 1;
        for (int i = 0; i < tracks; i++) {
            lyricsTrackSelector.addItem("" + y);
            y++;
        }
    }//GEN-LAST:event_lyricsDialogWindowGainedFocus

    private void lyricsDialogWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_lyricsDialogWindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_lyricsDialogWindowClosed

    /*
    * Close the lyrics-dialog and clear LyricsTrackSelector
    */
    private void lyricsDialogCloseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lyricsDialogCloseButtonActionPerformed
        lyricsDialog.dispose();
        lyricsTrackSelector.removeAllItems();
        
    }//GEN-LAST:event_lyricsDialogCloseButtonActionPerformed

    private void openFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileMenuItemActionPerformed
        // The data is read from a serialized file with ObjectInputStream.
        // I tried different approaches here, but the serialization turned out
        // to be the best by far. Efficient and simple.
        // Found help from here: http://stackoverflow.com/questions/16145682/deserialize-multiple-java-objects
        // And here: http://www.tutorialspoint.com/java/java_serialization.htm
        JFileChooser chooser = new JFileChooser();
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                FileInputStream fileIn = new FileInputStream(chooser.getSelectedFile());
                ObjectInputStream in = new ObjectInputStream(fileIn);
                ArrayList<Album> als = null;
                try {
                    als = (ArrayList<Album>) in.readObject();
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
                in.close();
                fileIn.close();
                albums = als;
                updateList();
            } catch (FileNotFoundException ex) {
                System.out.println("FileNotFoundException");
            } catch (IOException ex) {
                System.out.println("IOException");
            }
        }
    }//GEN-LAST:event_openFileMenuItemActionPerformed

    private void saveAsFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsFileMenuItemActionPerformed
        // Since Album-class implements serialization, the writing is handled
        // with ObjectOutputStream.
        JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String fileNameAndPath = fc.getSelectedFile().getPath();
            try {
                FileOutputStream fileOut = new FileOutputStream(fileNameAndPath);
                ObjectOutputStream out = new ObjectOutputStream(fileOut);
                // The whole album-arraylist is saved inside the .ser-file.
                out.writeObject(albums);
                out.close();
                fileOut.close();
                System.out.printf("Serialized data is saved in " + fileNameAndPath);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_saveAsFileMenuItemActionPerformed

    private void newArtistDialogCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newArtistDialogCancelButtonActionPerformed
        // Close the new-album dialog
        newDialog.dispose();
    }//GEN-LAST:event_newArtistDialogCancelButtonActionPerformed

    private void editArtistCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editArtistCancelButtonActionPerformed
        // Close the edit-dialog
        editDialog.dispose();
    }//GEN-LAST:event_editArtistCancelButtonActionPerformed

    private void jTextArea1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextArea1FocusLost
        // When focus of the jTextArea is lost all text is saved.
        String lyricsContent = jTextArea1.getText();
        
        albums.get(index).addLyrics(lyricsTrackSelector.getSelectedIndex(), lyricsContent);
    }//GEN-LAST:event_jTextArea1FocusLost

    private void deleteEditMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEditMenuItemActionPerformed
        // Delete the selected album from the artistList
        if (artistList.getSelectedIndex() != -1) {
            int answer = JOptionPane.showConfirmDialog(this, "Are you sure you wish to remove selected item?");
            if (answer == 0) {
                int selection = artistList.getSelectedIndex();
                undoManager.addEdit(new UndoAction(albums, albums.get(selection)));
                albums.remove(selection);
                // Set undo-item enabled.
                undoEditMenuItem.setEnabled(rootPaneCheckingEnabled);
            }
            updateList();
        }
    }//GEN-LAST:event_deleteEditMenuItemActionPerformed

    private void jTextArea1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea1KeyReleased
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jTextArea1KeyReleased

    private void undoEditMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoEditMenuItemActionPerformed
        // TODO add your handling code here:
        if (undoManager.canUndo())
            undoManager.undo();
        updateList();
        // Set redo-item enabled.
        redoEditMenuItem.setEnabled(rootPaneCheckingEnabled);
    }//GEN-LAST:event_undoEditMenuItemActionPerformed

    private void redoEditMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoEditMenuItemActionPerformed
        // TODO add your handling code here:
        if (undoManager.canRedo())
            undoManager.redo();
        updateList();
    }//GEN-LAST:event_redoEditMenuItemActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // Popup-menu item "Load image" loads an image using JFileChooser
        JFileChooser chooser = new JFileChooser();
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            Image i;
            try {
                i = ImageIO.read(chooser.getSelectedFile());
                path = chooser.getSelectedFile().getAbsolutePath();
                textAndImage1.setImage(i);
                textAndImage1.repaint();
            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // Remove image
        loadDefaultImage();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // Dialog window adds text over the image.
        String text = JOptionPane.showInputDialog("Please, input text");
        if (text != null)
            textAndImage1.setText(text);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // Remove text
        textAndImage1.setText("");
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void setAlbumFields() {
        editArtistName.setText(albums.get(index).getArtist());
        editArtistAlbum.setText(albums.get(index).getAlbum());
        editArtistGenreComboBox.setSelectedItem(albums.get(index).getGenre());
        editArtistYearSpinner.setValue(albums.get(index).getYear());
        editArtistTracksSpinner.setValue(albums.get(index).getTracks());
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAlbumButton;
    private javax.swing.JLabel album;
    private javax.swing.JLabel artist;
    private javax.swing.JList<String> artistList;
    private javax.swing.JMenuItem deleteEditMenuItem;
    private javax.swing.JTextField editArtistAlbum;
    private javax.swing.JButton editArtistCancelButton;
    private javax.swing.JComboBox<String> editArtistGenreComboBox;
    private javax.swing.JTextField editArtistName;
    private javax.swing.JButton editArtistSaveButton;
    private javax.swing.JSpinner editArtistTracksSpinner;
    private javax.swing.JSpinner editArtistYearSpinner;
    private javax.swing.JButton editButton;
    private javax.swing.JDialog editDialog;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitFileMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton lyricsButton;
    private javax.swing.JDialog lyricsDialog;
    private javax.swing.JButton lyricsDialogCloseButton;
    private javax.swing.JComboBox<String> lyricsTrackSelector;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTextField newArtistAlbum;
    private javax.swing.JButton newArtistDialogCancelButton;
    private javax.swing.JButton newArtistDialogSaveButton;
    private javax.swing.JComboBox<String> newArtistGenreComboBox;
    private javax.swing.JTextField newArtistName;
    private javax.swing.JSpinner newArtistTracksSpinner;
    private javax.swing.JSpinner newArtistYearSpinner;
    private javax.swing.JDialog newDialog;
    private javax.swing.JMenuItem openFileMenuItem;
    private javax.swing.JPopupMenu popupMenu;
    private javax.swing.JMenuItem redoEditMenuItem;
    private javax.swing.JMenuItem saveAsFileMenuItem;
    private TextAndImage textAndImage1;
    private javax.swing.JMenuItem undoEditMenuItem;
    private javax.swing.JLabel year;
    // End of variables declaration//GEN-END:variables
}
